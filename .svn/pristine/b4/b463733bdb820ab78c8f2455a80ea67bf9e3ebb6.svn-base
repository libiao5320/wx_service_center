<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.royao.mapper.DorderMapper">

	<resultMap id="RMDorder" type="com.royao.model.Dorder">
        <result property="orderId" column="order_id"/>
        <result property="orderSn" column="order_sn"/>
        <result property="paySn" column="pay_sn"/>
        <result property="storeId" column="store_id"/>
        <result property="storeName" column="store_name"/>
        <result property="buyerId" column="buyer_id"/>
        <result property="buyerName" column="buyer_name"/>
        <result property="goodsId" column="goods_id"/>
        <result property="goodsName" column="goods_name"/>
        <result property="goodsNum" column="goods_num"/>
        <result property="addTime" column="add_time"/>
        <result property="paymentCode" column="payment_code"/>
        <result property="paymentTime" column="payment_time"/>
        <result property="finnshedTime" column="finnshed_time"/>
        <result property="orderAmount" column="order_amount"/>
        <result property="couponId" column="coupon_id"/>
        <result property="couponAmount" column="coupon_amount"/>
        <result property="rcbId" column="rcb_id"/>
        <result property="rcbAmount" column="rcb_amount"/>
        <result property="pdAmount" column="pd_amount"/>
        <result property="orderState" column="order_state"/>
        <result property="lockState" column="lock_state"/>
        <result property="deleteState" column="delete_state"/>
        <result property="refundAmount" column="refund_amount"/>
        <result property="delayTime" column="delay_time"/>
        <result property="orderFrom" column="order_from"/>
        <result property="orderType" column="order_type"/>
        <result property="remark" column="remark"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Dordercolumns">
	    <![CDATA[
		order_id,order_sn,pay_sn,store_id,store_name,buyer_id,buyer_name,goods_id,goods_name,goods_num,add_time,payment_code,payment_time,finnshed_time,order_amount,coupon_id,coupon_amount,rcb_id,rcb_amount,pd_amount,order_state,lock_state,delete_state,refund_amount,delay_time,order_from,order_type,remark
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="save" useGeneratedKeys="true" keyProperty="orderId">
    <![CDATA[
        INSERT INTO d_order (
        	order_id ,
        	order_sn ,
        	pay_sn ,
        	store_id ,
        	store_name ,
        	buyer_id ,
        	buyer_name ,
        	goods_id ,
        	goods_name ,
        	goods_num ,
        	add_time ,
        	payment_code ,
        	payment_time ,
        	finnshed_time ,
        	order_amount ,
        	coupon_id ,
        	coupon_amount ,
        	rcb_id ,
        	rcb_amount ,
        	pd_amount ,
        	order_state ,
        	lock_state ,
        	delete_state ,
        	refund_amount ,
        	delay_time ,
        	order_from ,
        	order_type ,
        	remark 
        ) VALUES (
        	#{orderId} ,
        	#{orderSn} ,
        	#{paySn} ,
        	#{storeId} ,
        	#{storeName} ,
        	#{buyerId} ,
        	#{buyerName} ,
        	#{goodsId} ,
        	#{goodsName} ,
        	#{goodsNum} ,
        	#{addTime} ,
        	#{paymentCode} ,
        	#{paymentTime} ,
        	#{finnshedTime} ,
        	#{orderAmount} ,
        	#{couponId} ,
        	#{couponAmount} ,
        	#{rcbId} ,
        	#{rcbAmount} ,
        	#{pdAmount} ,
        	#{orderState} ,
        	#{lockState} ,
        	#{deleteState} ,
        	#{refundAmount} ,
        	#{delayTime} ,
        	#{orderFrom} ,
        	#{orderType} ,
        	#{remark} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE d_order SET
	        order_sn = #{orderSn} ,
	        pay_sn = #{paySn} ,
	        store_id = #{storeId} ,
	        store_name = #{storeName} ,
	        buyer_id = #{buyerId} ,
	        buyer_name = #{buyerName} ,
	        goods_id = #{goodsId} ,
	        goods_name = #{goodsName} ,
	        goods_num = #{goodsNum} ,
	        add_time = #{addTime} ,
	        payment_code = #{paymentCode} ,
	        payment_time = #{paymentTime} ,
	        finnshed_time = #{finnshedTime} ,
	        order_amount = #{orderAmount} ,
	        coupon_id = #{couponId} ,
	        coupon_amount = #{couponAmount} ,
	        rcb_id = #{rcbId} ,
	        rcb_amount = #{rcbAmount} ,
	        pd_amount = #{pdAmount} ,
	        order_state = #{orderState} ,
	        lock_state = #{lockState} ,
	        delete_state = #{deleteState} ,
	        refund_amount = #{refundAmount} ,
	        delay_time = #{delayTime} ,
	        order_from = #{orderFrom} ,
	        order_type = #{orderType} ,
	        remark = #{remark} 
        WHERE 
	        order_id = #{orderId} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM d_order WHERE
        order_id = #{id} 
    ]]>
    </delete>
    
    <select id="queryById" resultMap="RMDorder">
		SELECT <include refid="Dordercolumns" />
	    <![CDATA[
		    FROM d_order 
	        WHERE 
		        order_id = #{id} 
	    ]]>
	</select>
	

		
    <select id="listWithPageCount" resultType="long">
        SELECT count(*) FROM d_order where 1=1

    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="listWithPage" resultType="java.util.HashMap">
    	SELECT <include refid="Dordercolumns" />
	    FROM d_order 
		where 1=1 
		limit #begin# , #end#
    </select>
	
	
	
	  <select id="queryAll" resultMap="RMDorder">
    	SELECT <include refid="Dordercolumns" />
	    FROM d_order 
	  </select>
	  
	    <select id="queryByCondition" resultMap="RMDorder">
    	SELECT <include refid="Dordercolumns" />
	    FROM d_order 
		
		<where>	      				
	       <if test="@Ognl@isNotEmpty(orderId)">
				AND order_id = #{orderId}
			</if>
	       <if test="@Ognl@isNotEmpty(orderSn)">
				AND order_sn = #{orderSn}
			</if>
	       <if test="@Ognl@isNotEmpty(paySn)">
				AND pay_sn = #{paySn}
			</if>
	       <if test="@Ognl@isNotEmpty(storeId)">
				AND store_id = #{storeId}
			</if>
	       <if test="@Ognl@isNotEmpty(storeName)">
				AND store_name = #{storeName}
			</if>
	       <if test="@Ognl@isNotEmpty(buyerId)">
				AND buyer_id = #{buyerId}
			</if>
	       <if test="@Ognl@isNotEmpty(buyerName)">
				AND buyer_name = #{buyerName}
			</if>
	       <if test="@Ognl@isNotEmpty(goodsId)">
				AND goods_id = #{goodsId}
			</if>
	       <if test="@Ognl@isNotEmpty(goodsName)">
				AND goods_name = #{goodsName}
			</if>
	       <if test="@Ognl@isNotEmpty(goodsNum)">
				AND goods_num = #{goodsNum}
			</if>
	       <if test="@Ognl@isNotEmpty(addTimeBegin)">
				AND add_time >= #{addTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(addTimeEnd)">
				AND add_time &lt;= #{addTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(paymentCode)">
				AND payment_code = #{paymentCode}
			</if>
	       <if test="@Ognl@isNotEmpty(paymentTimeBegin)">
				AND payment_time >= #{paymentTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(paymentTimeEnd)">
				AND payment_time &lt;= #{paymentTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(finnshedTimeBegin)">
				AND finnshed_time >= #{finnshedTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(finnshedTimeEnd)">
				AND finnshed_time &lt;= #{finnshedTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(orderAmount)">
				AND order_amount = #{orderAmount}
			</if>
	       <if test="@Ognl@isNotEmpty(couponId)">
				AND coupon_id = #{couponId}
			</if>
	       <if test="@Ognl@isNotEmpty(couponAmount)">
				AND coupon_amount = #{couponAmount}
			</if>
	       <if test="@Ognl@isNotEmpty(rcbId)">
				AND rcb_id = #{rcbId}
			</if>
	       <if test="@Ognl@isNotEmpty(rcbAmount)">
				AND rcb_amount = #{rcbAmount}
			</if>
	       <if test="@Ognl@isNotEmpty(pdAmount)">
				AND pd_amount = #{pdAmount}
			</if>
	       <if test="@Ognl@isNotEmpty(orderState)">
				AND order_state = #{orderState}
			</if>
	       <if test="@Ognl@isNotEmpty(lockState)">
				AND lock_state = #{lockState}
			</if>
	       <if test="@Ognl@isNotEmpty(deleteState)">
				AND delete_state = #{deleteState}
			</if>
	       <if test="@Ognl@isNotEmpty(refundAmount)">
				AND refund_amount = #{refundAmount}
			</if>
	       <if test="@Ognl@isNotEmpty(delayTimeBegin)">
				AND delay_time >= #{delayTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(delayTimeEnd)">
				AND delay_time &lt;= #{delayTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(orderFrom)">
				AND order_from = #{orderFrom}
			</if>
	       <if test="@Ognl@isNotEmpty(orderType)">
				AND order_type = #{orderType}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				AND remark = #{remark}
			</if>
		</where>
	  </select>

	
</mapper>

