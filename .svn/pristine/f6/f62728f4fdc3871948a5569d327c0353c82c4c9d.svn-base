/*
 * Powered By [rapid-framework]
 * Web Site: http://www.rapid-framework.org.cn
 * Google Code: http://code.google.com/p/rapid-framework/
 * Since 2008 - 2015
 */


package com.royao.services.impl;

import com.royao.commons.enums.RedpacketsStatus;
import com.royao.mapper.*;
import com.royao.model.*;
import com.royao.services.base.impl.BaseServiceImpl;
import com.royao.services.inface.*;
import com.royao.util.DateUtil;
import com.royao.util.KeyBuilder;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Service("orderService")
public  class DorderServiceImpl extends BaseServiceImpl<Dorder> implements DorderService {

    @Autowired
    private DorderMapper dorderMapper;
    
    
    @Autowired
    private DredpacketsMapper dredpacketsMapper;
    
    @Autowired
    private DmemberService dmemberservice; 
    
    
    @Autowired
    private DredpacketsDistributeMapper dredpacketsdistributeMapper;

	@Autowired
	private DevaluateService  devaluateService;
	@Autowired
	private DevaluateImageService devaluateImageService;

	@Autowired
	private DcomplainService dcomplainService;


    public int save(Dorder dorder) throws Exception {
        return dorderMapper.save(dorder);
    }

    public int update(Dorder dorder) throws Exception {
        return dorderMapper.update(dorder);
    }

    public int delete(Long id) throws Exception {
        return dorderMapper.delete(id);
    }

    public Dorder queryById(Long id) throws Exception {
        return dorderMapper.queryById(id);
    }

    public List<Dorder> queryByCondtion(Map map) throws Exception {
        return dorderMapper.queryByCondtion(map);
    }

    public List<Dorder> queryAll() throws Exception {
        return dorderMapper.queryAll();
    }

    public List<Dorder> listWithPage(Dorder t) throws Exception {
        return this.dorderMapper.listWithPage(t);
    }

    @Cacheable(value = "myCache", key = "#dorder")
    public List queryByUser(Dorder dorder) throws Exception {
        return dorderMapper.queryByUser(dorder);
    }

    public Integer queryOrderCountByUserId(Long memId) throws Exception {
        return dorderMapper.queryOrderCountByUserId(memId);
    }

    public Map queryDifferentStatusOrderCountByUserId(Long memId) throws Exception {
        return dorderMapper.queryDifferentStatusOrderCountByUserId(memId);
    }

	public void setOrderStatus(Integer  orderState,Long paySn,String paymentTime,String finnshedTime,Long orderId,Long pdAmount) throws SQLException {
        
		Dorder dorder=new Dorder();
		dorder.setPaySn(paySn);
		dorder.setOrderState(orderState);
		dorder.setPaymentTime(new Date());
		dorder.setOrderId(Integer.parseInt(orderId+""));
		dorder.setPdAmount(pdAmount);
		
		this.dorderMapper.setOrderStatus(dorder);		
	}

	public List<Dorder> queryByPaySn(Integer orderState,Long paySn) throws SQLException {
		
		return dorderMapper.queryByPaySn(orderState, paySn);
	}

	public List<Dorder> getByGoodsdelaytime(Dorder or) throws SQLException {
		return this.dorderMapper.getByGoodsdelaytime(or);
	}

	public List<Dorder> getByTimeId(Dorder or) throws SQLException {
		return this.dorderMapper.getByTimeId(or);
	}
	
	
	/**
	 * 订单公共流程(红包)实现方法
	 * orderId
	 */
	public String commonRedOrder(Dorder dorder) throws SQLException {
		String rcdid=dorder.getRcbId()+"";
		try {
			/**/
			/**修改红包状态**/
			if(StringUtils.isNotBlank(rcdid) && !"".equals(rcdid)  && !"null".equals(rcdid) ){
				logger.info("有红包"+dorder.getRcbId());
				/*子红包*/
				DredpacketsDistribute dredpacketsDistribute=dredpacketsdistributeMapper.queryById(dorder.getRcbId());
				dredpacketsDistribute.setStatus(RedpacketsStatus.used);//已经使用 
				dredpacketsDistribute.setUpdateTime(new Date());
				
				dredpacketsdistributeMapper.update(dredpacketsDistribute);
				/*大红包*/
				Dredpackets dredpackets=new Dredpackets();
				dredpackets.setId(dredpacketsDistribute.getRedpacketsId());//主红包id
				dredpacketsMapper.updateAlreadyUsed(dredpackets);
			}else{
				logger.info("未绑定红包");
			}
				
				return "SUCCESS";
			} catch (Exception e) {
				logger.error("订单公共流程（red红包）实现方法异常："+e.getMessage());
				e.printStackTrace();
			}
		 logger.error("订单公共流程（red红包）实现方法异常");
		 return "FILE";
	}
	
	/**
	 * 订单公共流程实现方法
	 * orderId
	 */
	public String commonOrder(Map<String,Object> map) throws SQLException {
		
		Long orderId=0L;
		try {
			if(StringUtils.isNotBlank(map.get("orderId")+"")){
				orderId=Long.parseLong(map.get("orderId")+"");
			}
			/**/
			Dorder dorder=dorderMapper.queryById(orderId);
			
			dorder.setOrderState(2);//状态 2 未消费
			dorder.setPaymentTime(new Date());//支付时间
			
			/**修改订单状态**/
			dorderMapper.update(dorder);
			
			/**修改红包状态**/
			this.commonRedOrder(dorder);
			
			dmemberservice.setJianAccountUtil(1,map);//1普通订单
				
				Map<String,Object> accountMap=new HashMap<String, Object>();
				
			     /**
			     * memberId 会员id
			     * pdAmount 扣款总额
				 * sn  交易单号
				 * explain流水说明
				 * **/
				accountMap.put("memberId", dorder.getMemberId());
				accountMap.put("pdAmount", dorder.getPdAmount());
				accountMap.put("paySn", dorder.getPaySn());
				accountMap.put("explain","购物消费");
				accountMap.put("frozenAmount",dorder.getBookFinalPayment());//冻结总金额
				
				return "SUCCESS";
			} catch (Exception e) {
				logger.error("订单公共流程实现方法异常："+e.getMessage());
				e.printStackTrace();
			}
			logger.error("订单公共流程实现方法异常");
		 return "FILE";
	}

	/**
	 *  获取 示卡消费券id号码
	 */
	public String getConsumptionCode() {
		
		String consumptionCode="500";
		
		while(true){
			consumptionCode=KeyBuilder.createUidNew10();
			List<Dorder> countList=dorderMapper.getCountByConsumptionCode(consumptionCode);
			
			//循环体
			if(countList.size()==0){
				break;
			}
		}
		return consumptionCode;
	}
	
	/**p端订单管理 杨鑫*/
	public List<Dorder> queryAllOrderBy(Order or) throws SQLException {
		return this.dorderMapper.queryAllOrderBy(or);
	}

	public Long queryAllOrderByCount(Order or) throws SQLException {
		return this.dorderMapper.queryAllOrderByCount(or);
	}

	/**
	 *P端未付余款管理 
	 * 王亚
	 */
	public Long DqueryAllOrderByCount(Dorder or) throws SQLException {
		return this.dorderMapper.DqueryAllOrderByCount(or);
	}

	public List<Dorder> DqueryAllOrderBy(Dorder or) throws SQLException {
		
		return this.dorderMapper.DqueryAllOrderBy(or);
	}

	

	/**
	 * P端退款申请管理
	 */
	
	public List<Dorder> TqueryAllOrderBy(Dorder or) throws SQLException {
		
		return  this.dorderMapper.TqueryAllOrderBy(or);
	}

	public Long TqueryAllOrderByCount(Dorder or) throws SQLException {
		
		return this.dorderMapper.TqueryAllOrderByCount(or);
	}
	
	/**
	 * p端处理退款申请
	 */
	public List<Map> RqueryAllOrderByCount(Dorder or) throws SQLException {
		
		return this.dorderMapper.RqueryAllOrderByCount(or);
	}
   
	/**
	 * 根据订单号修改订单状态
	 */
	public int updateOrderStateByOrderId(Dorder or) throws SQLException {
			return dorderMapper.updateOrderStateByOrderId(or);
	}


	/**
	 * 评价
	 * @param devaluate
	 * @param l
	 * @return
	 * @throws Exception
	 */
	public boolean comment(Devaluate devaluate, List l) throws Exception {
		boolean flag = false;
		int count = this.devaluateService.save(devaluate);
		if ( count >  0 ) {
			if (null != l && l.size() > 0) {
				for (int i = 0; i < l.size(); i++) {
					DevaluateImage devaluateImage = new DevaluateImage();
					String imgPath = (String) l.get(i);


					devaluateImage.setImg(imgPath);
					devaluateImage.setEvaluateId(devaluate.getId());
					devaluateImage.setCreateTime(DateUtil.current());
					devaluateImage.setIsShow("Y");

					devaluateImageService.save(devaluateImage);
				}
			}


			Dorder dorder  = dorderMapper.queryById(devaluate.getOrderId());
			dorder.setOrderState(5);
			updateOrderStateByOrderId(dorder);
			flag  = true;
		}

		return flag;
	}

	public boolean complain(Dcomplain dcomplain) throws Exception {
		boolean flag = false;

		int count = 0 ;
		count = dcomplainService.save(dcomplain);
		if( count > 0 )
		{
			Dorder dorder  = dorderMapper.queryById(dcomplain.getOrderId());
			dorder.setOrderState(10);
			updateOrderStateByOrderId(dorder);
			flag = true;

		}

		return flag;
	}

	public Integer orderOverdue(Integer overdueTime) {
		return this.dorderMapper.orderOverdue(overdueTime);
	}

	public Integer listWithPageCount(Dorder order) {
		return this.dorderMapper.listWithPageCount(order);
	}

	public boolean updateSettlementState(Dorder dorder) throws Exception {
		return dorderMapper.updateSettlementState(dorder) > 0;
	}

	public Dorder queryByIdTob(Long id) {
		return this.dorderMapper.queryByIdTob(id);
	}

	public List<Dorder> orderByClearPage(Dclear clear) {
		return this.dorderMapper.orderByClearPage(clear);
	}

	public Integer orderByClearPageCount(Dclear clear) {
		return this.dorderMapper.orderByClearPageCount(clear);
	}

}


	

