/*
 * Powered By [rapid-framework]
 * Web Site: http://www.rapid-framework.org.cn
 * Google Code: http://code.google.com/p/rapid-framework/
 * Since 2008 - 2015
 */



package com.royao.services.impl;


import com.royao.mapper.DredpacketsDistributeMapper;
import com.royao.model.Dmember;
import com.royao.model.DredpacketsDistribute;
import com.royao.services.base.impl.BaseServiceImpl;
import com.royao.services.inface.DredpacketsDistributeService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;


@Service("redpacketsDistributeService")
public class DredpacketsDistributeServiceImpl extends BaseServiceImpl<DredpacketsDistribute> implements DredpacketsDistributeService {
	
		@Autowired
		private DredpacketsDistributeMapper dredpacketsDistributeMapper ;



		public int save(DredpacketsDistribute dredpacketsDistribute) throws Exception {
        return dredpacketsDistributeMapper.save(dredpacketsDistribute);
		}

		public int update(DredpacketsDistribute dredpacketsDistribute) throws Exception {
        return dredpacketsDistributeMapper.update(dredpacketsDistribute);
		}

		public int delete(Long id) throws Exception {
       return dredpacketsDistributeMapper.delete(id);
		}

	     public DredpacketsDistribute queryById(Long id) throws Exception {
         return dredpacketsDistributeMapper.queryById(id);
         }

		public List<DredpacketsDistribute> queryByCondtion(Map map) throws Exception {
        return dredpacketsDistributeMapper.queryByCondtion(map);
		}

		public List<DredpacketsDistribute> queryAll() throws Exception {
		   return dredpacketsDistributeMapper.queryAll();
		}



    @Cacheable(value = "myCache", key = "#dmember")
    public List queryByUser(Dmember dmember) throws Exception {
        return dredpacketsDistributeMapper.queryByUser(dmember);
    }

	public Integer queryCountByUserId(Long memId) throws Exception {
		return dredpacketsDistributeMapper.queryCountByUserId(memId);
	}

	public List<DredpacketsDistribute> listWithPage(DredpacketsDistribute t) throws Exception {

			return null;
		}

		public List<DredpacketsDistribute> queryByredpacketsId(
				DredpacketsDistribute red) {
			return dredpacketsDistributeMapper.queryByredpacketsId(red);
		}

		public List<DredpacketsDistribute> queryByredIdAndMemberId(
				DredpacketsDistribute red) {
			return dredpacketsDistributeMapper.queryByredIdAndMemberId(red);
		}

		public List<DredpacketsDistribute> queryByMemberId(
				DredpacketsDistribute red) {
			return dredpacketsDistributeMapper.queryByMemberId(red);
		}

		
		public List<DredpacketsDistribute> queryBymemberIdAndKy(
				DredpacketsDistribute red) {
			return dredpacketsDistributeMapper.queryBymemberIdAndKy(red);
		}

		public boolean shareRedPack(Long packId) throws Exception {
			boolean result = true;
			// 红包是否有效？
			Integer flag = dredpacketsDistributeMapper.validPack(packId);
			// 是否已经分享过红包 ？
			Integer shareCount  = dredpacketsDistributeMapper.querySourceRedPackCount(packId);

			// 如果是有效红包 并且没有分享过红包则获得一个分享红包;
			if( flag > 0 && shareCount < 1) {
				DredpacketsDistribute dredpacketsDistribute = new DredpacketsDistribute();


			}




			return false;
		}

}