package com.royao.ctrl;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.royao.commons.enums.RedpacketsStatus;
import com.royao.commons.enums.StoreStatus;
import com.royao.http.RequestContent;
import com.royao.http.RequestHandler;
import com.royao.http.ResponseContent;
import com.royao.http.ResponseHandler;
import com.royao.model.Dgoods;
import com.royao.model.Dredpackets;
import com.royao.model.DredpacketsDistribute;
import com.royao.model.Dstore;
import com.royao.model.DstoreText;
import com.royao.model.base.PageObject;
import com.royao.services.inface.DgoodsService;
import com.royao.services.inface.DredpacketsDistributeService;
import com.royao.services.inface.DredpacketsService;
import com.royao.services.inface.DstoreService;
import com.royao.services.inface.DstoreTextService;
import com.royao.util.JsonUtil;

/**
 * 
 * ClassName: StoreCenterCtrl 
 * @Description: 商家管理
 * @author Liu Pinghui
 * @date 2016年1月5日
 */
@Controller
@RequestMapping("/store")
public class StoreCenterCtrl {

	Logger logger = Logger.getLogger(this.getClass());
	
	@Autowired
	private DstoreService storeService;
	
	@Autowired
	private DgoodsService goodsService;
	
	@Autowired
	private DstoreTextService storeTextService;
	
	@Autowired
	private DredpacketsService redpacketsService;
	
	@Autowired
	private DredpacketsDistributeService redpacketsDistributeService;
	/**
	 * 
	 * @Description: 商家列表
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月5日
	 */
	@ResponseBody
	@RequestMapping("/list.htm")
	public String rank(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
        RequestContent  requestContent  = RequestHandler.execute(request);
		try {
			List<Dstore> list = null;
			Dstore store = new Dstore();
			PageObject pageInfo = new PageObject();
			if(null != requestContent.getBody()){
				//带条件查询
				/*******如果还有其他条件，可以在此处添加*******/
				if(null != requestContent.getBody().get("scId")){
					//商家分类
					store.setScId(Long.parseLong(requestContent.getBody().get("scId")));
				}
				if(null != requestContent.getBody().get("status")){
					//状态
					if(requestContent.getBody().get("status").equals(StoreStatus.normal.toString()))
						store.setStatus(StoreStatus.normal);
					
					if(requestContent.getBody().get("status").equals(StoreStatus.delete.toString()))
						store.setStatus(StoreStatus.delete);
				}
				
				if(StringUtils.isNotEmpty(requestContent.getBody().get("search"))){
					store.setSearch(requestContent.getBody().get("search"));
				}
				
				if(StringUtils.isNotEmpty(requestContent.getBody().get("pageNo"))){
					
		            pageInfo.setPageNo(Integer.parseInt(requestContent.getBody().get("pageNo")));
		            
				}else{//如果用户带参数，则默认显示第一页
					pageInfo.setPageNo(1);
				}
				
				store.setPageInfo(pageInfo);
				
			}
			
			list = this.storeService.listWithPage(store);
			
			if(list != null && list.size() > 0){
				responseContent = ResponseHandler.makeResponse(list,true);
            }
			return JSONObject.toJSONString(responseContent);
		} catch (Exception e) {
			logger.info("商家列表获取错误", e);
		}
		
		return null;
	}
	
	/**
	 * 
	 * @Description: 商家详情
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月6日
	 */
	@ResponseBody
	@RequestMapping("/detail.htm")
	public String detail(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
        RequestContent  requestContent  = RequestHandler.execute(request);
		try {
			Dstore store = null;
			
			if(null != requestContent.getBody()){
				store = this.storeService.queryDetailById(Long.parseLong(requestContent.getBody().get("id")));
				if(store != null){
					responseContent = ResponseHandler.makeResponse(store,true);
				}
			}
		}catch(Exception e){
			logger.info("请求商家详情数据错误！", e);
		}
		
		return JSONObject.toJSONString(responseContent);
	}
	
	/**
	 * 
	 * @Description: 商家下面的所有商品列表
	 * @param @param request
	 * @param @param response
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月7日
	 */
	@ResponseBody
	@RequestMapping("/goodslist.htm")
	public String goodslist(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
        RequestContent  requestContent  = RequestHandler.execute(request);
        
        Map<?, ?> params = requestContent.getBody();
        response.setCharacterEncoding("utf-8");

        Dgoods param = JSON.parseObject(JsonUtil.map2json(params), Dgoods.class);
        PageObject pageInfo = new PageObject();
        
		try {
			
			if(null != requestContent.getBody()){
				if(null != requestContent.getBody().get("pageNo")){
					//是否存在分页信息
					pageInfo.setPageNo(Integer.parseInt(requestContent.getBody().get("pageNo")));
					param.setPageInfo(pageInfo);
				}
				
				if(null != requestContent.getBody().get("id")){
					param.setStoreId(Long.parseLong(requestContent.getBody().get("id")));
				}
				if(null != requestContent.getBody().get("goodsState")){
					param.setGoodsState(Integer.parseInt(requestContent.getBody().get("goodsState")));
				}
				
				List<Dgoods> goodList= this.goodsService.listWithPage(param);
				if(goodList != null){
					responseContent = ResponseHandler.makeResponse(goodList,true);
				}
			}
			
		}catch(Exception e){
			logger.info("商家下面的所有商品列表！", e);
		}
		
		return JSONObject.toJSONString(responseContent);
	}
	
	
	@ResponseBody
    @RequestMapping (value = "/nearby.htm")
    public String nearby( HttpServletRequest request , HttpServletResponse response)
    {
        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);


        Map<?, ?> params = requestContent.getBody();

        String x = (String) params.get("x");
        String y = (String) params.get("y");

        Integer pageNo = 1;
        if(params.get("pageNo") != null){
        	pageNo = Integer.parseInt(params.get("pageNo").toString());
        }
        
        if (null != params) {
            List<Dstore> list = null;
            try {
                list = this.storeService.getNearbyStore(Double.valueOf(x),Double.valueOf(y),params);
                response.setCharacterEncoding("utf-8");
                if (null != list)
                    responseContent = ResponseHandler.makeResponse(list, true);
                else
                    return null;

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else
            return null;

        return JSONObject.toJSONString(responseContent);
    }
	
	/**
	 * 
	 * @Description: 商家图文详情
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月18日
	 */
	@ResponseBody
	@RequestMapping("/text.htm")
	public String text(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        
        try {
			DstoreText text = null;
			
			if(null != requestContent.getBody()){
				text = this.storeTextService.queryById(Long.parseLong(requestContent.getBody().get("id")));
				if(text != null){
					responseContent = ResponseHandler.makeResponse(text,true);
				}
			}
		}catch(Exception e){
			logger.info("请求商家详情数据错误！", e);
		}
		
		return JSONObject.toJSONString(responseContent);
	}
	
	/**
	 * 
	 * @Description: 分享商家
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月18日
	 */
	@ResponseBody
	@RequestMapping("/share.htm")
	public String share(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
		RequestContent requestContent = RequestHandler.execute(request);
		
		try {
			DredpacketsDistribute red = new DredpacketsDistribute();
			
			if(null != requestContent.getBody()){
				red.setMemberId(Long.parseLong(requestContent.getBody().get("memberId")));
				red.setPurpose("fx");
				red = this.redpacketsDistributeService.queryIsShare(red);
				if(red == null){//有权获取一个分享红包
					/*******从大红包中获取一个可以用的并且是用作分享的红包**********/
					Dredpackets dred = new Dredpackets();
					dred.setPurpose("fx");
					dred.setType("quota");
					dred.setValidityTime(new Date());
					dred.setStatus("on");
					List<Dredpackets> dredList = this.redpacketsService.queryAvailable(dred);//查找可用红包
					
					if(dredList != null && dredList.size() > 0){
						
						dred = dredList.get(0);
						red = new DredpacketsDistribute();
						red.setRedpacketsId(dred.getId());//大红包ID
						if(dred.getType() == "quota")
							red.setMoney(dred.getSingleAmount());//红包金额
						else
						{
							Long amount = this.redpacketsService.getRandomAmount(dred);//红包金额
							red.setMoney(amount);
						}
						red.setValidTime(dred.getValidityTime());//红包过期时间
						red.setMemberId(Long.parseLong(requestContent.getBody().get("memberId")));//领取人
						red.setCreateTime(new Date());//领取时间
						red.setPurpose("fx");//分享所得
						red.setStatus(RedpacketsStatus.unuse);//未使用
						red.setName("分享有礼，系统红包");
						
						this.redpacketsDistributeService.save(red);
						
						dred.setReceive(dred.getReceive() + 1);//将大红包的领取次数＋1
						
						this.redpacketsService.update(dred);
					
						responseContent = ResponseHandler.makeResponse(red,true);
					}
				}
			}
		}catch(Exception e){
			logger.info("请求商家详情数据错误！", e);
		}
		
		return JSONObject.toJSONString(responseContent);
	}
}
