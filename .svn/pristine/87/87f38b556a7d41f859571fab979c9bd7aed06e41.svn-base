package com.royao.ctrl;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.royao.commons.enums.StoreStatus;
import com.royao.http.RequestContent;
import com.royao.http.RequestHandler;
import com.royao.http.ResponseContent;
import com.royao.http.ResponseHandler;
import com.royao.model.Dgoods;
import com.royao.model.Dstore;
import com.royao.model.base.PageObject;
import com.royao.services.inface.DgoodsService;
import com.royao.services.inface.DstoreService;
import com.royao.util.JsonUtil;

/**
 * 
 * ClassName: StoreCenterCtrl 
 * @Description: 商家管理
 * @author Liu Pinghui
 * @date 2016年1月5日
 */
@Controller
@RequestMapping("/store")
public class StoreCenterCtrl {

	@Autowired
	private DstoreService storeService;
	
	@Autowired
	private DgoodsService goodsService;
	
	/**
	 * 
	 * @Description: 商家列表
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月5日
	 */
	@ResponseBody
	@RequestMapping("/list.htm")
	public String rank(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
        RequestContent  requestContent  = RequestHandler.execute(request);
		try {
			List<Dstore> list = null;
			Dstore store = new Dstore();
			
			if(null != requestContent.getBody()){
				//带条件查询
				/*******如果还有其他条件，可以在此处添加*******/
				if(null != requestContent.getBody().get("scId")){
					//商家分类
					store.setScId(Long.parseLong(requestContent.getBody().get("scId")));
				}
				if(null != requestContent.getBody().get("status")){
					//状态
					if(requestContent.getBody().get("status").equals(StoreStatus.normal.toString()))
						store.setStatus(StoreStatus.normal);
					
					if(requestContent.getBody().get("status").equals(StoreStatus.delete.toString()))
						store.setStatus(StoreStatus.delete);
				}
			}
			
			list = this.storeService.findList(store);
			
			if(list != null && list.size() > 0){
				responseContent = ResponseHandler.makeResponse(list,true);
            }
			return JSONObject.toJSONString(responseContent);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * 
	 * @Description: 商家详情
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月6日
	 */
	@ResponseBody
	@RequestMapping("/detail.htm")
	public String detail(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
        RequestContent  requestContent  = RequestHandler.execute(request);
		try {
			Dstore store = null;
			
			if(null != requestContent.getBody()){
				store = this.storeService.queryDetailById(Long.parseLong(requestContent.getBody().get("id")));
				if(store != null){
					responseContent = ResponseHandler.makeResponse(store,true);
				}
			}
			return JSONObject.toJSONString(responseContent);
		}catch(Exception e){
			System.out.println("请求商家详情数据错误！");
			e.printStackTrace();
		}
		
		
		return null;
	}
	
	/**
	 * 
	 * @Description: 商家下面的所有商品列表
	 * @param @param request
	 * @param @param response
	 * @param @return   
	 * @return String  
	 * @throws
	 * @author Liu Pinghui
	 * @date 2016年1月7日
	 */
	@ResponseBody
	@RequestMapping("/goodslist.htm")
	public String goodslist(HttpServletRequest request , HttpServletResponse response){
		
		ResponseContent responseContent = new ResponseContent();
        RequestContent  requestContent  = RequestHandler.execute(request);
        
        Map<?, ?> params = requestContent.getBody();


        response.setCharacterEncoding("utf-8");

        Dgoods param = JSON.parseObject(JsonUtil.map2json(params), Dgoods.class);
        PageObject pageInfo = new PageObject();
        
		try {
			
			if(null != requestContent.getBody()){
				if(null != requestContent.getBody().get("pageNo")){
					//是否存在分页信息
					pageInfo.setPageNo(Integer.parseInt(requestContent.getBody().get("pageNo")));
					param.setPageInfo(pageInfo);
				}
				
				if(null != requestContent.getBody().get("id")){
					param.setStoreId(Long.parseLong(requestContent.getBody().get("id")));
				}
				if(null != requestContent.getBody().get("goodsState")){
					param.setGoodsState(Integer.parseInt(requestContent.getBody().get("goodsState")));
				}
				
				List<Dgoods> goodList= this.goodsService.listWithPage(param);
				if(goodList != null){
					responseContent = ResponseHandler.makeResponse(goodList,true);
				}
			}
			return JSONObject.toJSONString(responseContent);
		}catch(Exception e){
			System.out.println("请求商家详情数据错误！");
			e.printStackTrace();
		}
		
		return null;
	}
}
