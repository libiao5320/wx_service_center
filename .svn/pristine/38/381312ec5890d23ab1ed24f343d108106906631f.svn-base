/*
 * Powered By [rapid-framework]
 * Web Site: http://www.rapid-framework.org.cn
 * Google Code: http://code.google.com/p/rapid-framework/
 * Since 2008 - 2015
 */


package com.royao.services.impl;


import com.royao.mapper.DorderMapper;
import com.royao.model.Dmember;
import com.royao.model.Dorder;
import com.royao.services.base.impl.BaseServiceImpl;
import com.royao.services.inface.DorderService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;


@Service("orderServiceImpl")
public class DorderServiceImpl extends BaseServiceImpl<Dorder> implements DorderService {

    @Autowired
    private DorderMapper dorderMapper;


    public int save(Dorder dorder) throws Exception {
        return dorderMapper.save(dorder);
    }

    public int update(Dorder dorder) throws Exception {
        return dorderMapper.update(dorder);
    }

    public int delete(Long id) throws Exception {
        return dorderMapper.delete(id);
    }

    public Dorder queryById(Long id) throws Exception {
        return dorderMapper.queryById(id);
    }

    public List<Dorder> queryByCondtion(Map map) throws Exception {
        return dorderMapper.queryByCondtion(map);
    }

    public List<Dorder> queryAll() throws Exception {
        return dorderMapper.queryAll();
    }

    public List<Dorder> listWithPage(Dorder t) throws Exception {
        return null;
    }

    @Cacheable(value = "myCache", key = "#dorder")
    public List queryByUser(Dorder dorder) throws Exception {
        return dorderMapper.queryByUser(dorder);
    }

    public Integer queryOrderCountByUserId(Long memId) throws Exception {
        return dorderMapper.queryOrderCountByUserId(memId);
    }

    public Map queryDifferentStatusOrderCountByUserId(Long memId) throws Exception {
        return dorderMapper.queryDifferentStatusOrderCountByUserId(memId);
    }

	public void setOrderStatus(Integer  orderState,Long paySn,String paymentTime,String finnshedTime) throws SQLException {
         this.dorderMapper.setOrderStatus(orderState,paySn,paymentTime,finnshedTime);		
	}

	public List<Dorder> queryByPaySn(Integer orderState,Long paySn) throws SQLException {
		
		return dorderMapper.queryByPaySn(orderState, paySn);
	}

	public List<Dorder> getByGoodsdelaytime(Dorder or) throws SQLException {
		return this.dorderMapper.getByGoodsdelaytime(or);
	}

	public List<Dorder> getByTimeId(Dorder or) throws SQLException {
		return this.dorderMapper.getByTimeId(or);
	}

}