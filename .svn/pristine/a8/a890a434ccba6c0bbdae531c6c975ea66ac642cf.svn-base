package com.royao.ctrl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.royao.http.RequestContent;
import com.royao.http.RequestHandler;
import com.royao.http.ResponseContent;
import com.royao.http.ResponseHandler;
import com.royao.model.*;
import com.royao.model.base.PageObject;
import com.royao.services.inface.*;
import com.royao.util.JsonUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by libia on 2016/1/5.
 */
@Controller
@RequestMapping(value ="/member")
public class MemberCenterCtrl {

	@Autowired
	private DmemberService dmemberService;
	@Autowired
	private DorderService dorderService;
	@Autowired
	private DconsumptionService dconsumptionService;
	@Autowired
	private DredpacketsDistributeService dredpacketsDistributeService;
	@Autowired
	private DcollectService dcollectService;
	@Autowired
	private DtopmanService dtopmanService;
	@Autowired
	private DbalanceLogsService dbalancelogsService;
    @Autowired
    private DvipService dvipService ;


    @ResponseBody
    @RequestMapping(value = "/ucCenter.htm")
    public String memberCenter(HttpServletRequest request) {
        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();


        String wxCode  = "";
        if( null != params.get("wxCode"))
        wxCode = (String) params.get("wxCode");



        Map result = null;
        if( wxCode != null && !"".equals(wxCode) ) {
            try {


                Dmember dmember = dmemberService.queryByWxCode(wxCode);

                if (dmember != null) {
                    result = new HashMap();

                    Dvip  nextVip  =null;
                    Map differentTypeCountMap = dorderService.queryDifferentStatusOrderCountByUserId(dmember.getMemberId()); //用户不同状态订单数
                    Map collectCount = dcollectService.queryCountByUserId(dmember.getMemberId());
                    Integer consumptionCount = dconsumptionService.queryCountByUserId(dmember.getMemberId());
                    Integer redpackCount = dredpacketsDistributeService.queryCountByUserId(dmember.getMemberId());


                    result.put("memberInfo", dmember);
                    int gread = 0;
                    if( null != dmember.getDvip() ) {
                        gread = dmember.getDvip().getGreade();
                        gread ++;
                    }
                        else
                        gread = 1;

                    nextVip = dvipService.queryByGreade(gread);


                    result.put("differentTypeCountMap", differentTypeCountMap);
                    result.put("consumptionCount", consumptionCount);
                    result.put("redpackCount", redpackCount);
                    result.put("collectCount", collectCount);
                    result.put("nextVip", nextVip);
                }
                responseContent = ResponseHandler.makeResponse(result, true);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return JSONObject.toJSONString(responseContent);

    }


    /**
     * 设置支付密码
     *
     * @param request
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/getMyInfo.htm")
    public String myInfo(HttpServletRequest request) {
        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        String wxCode = params.get("wxCode").toString();
        try {
            // 根据微信id查询会员信息
            Dmember dmember = dmemberService.queryByWxCode(wxCode);
            responseContent = ResponseHandler.makeResponse(dmember, true);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return JSONObject.toJSONString(responseContent);

    }


    /**
     * 设置支付密码
     *
     * @param request
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/updatePayment.htm")
    public String updatePayment(HttpServletRequest request) {
        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        Integer pageNo = (Integer) params.get("pageNo");

        String wxCode = (String) params.get("wxCode");

        String status = "";
        PageObject pageObject = new PageObject();
        pageObject.setPageNo(1);
        if (null != params)
            status = (String) params.get("status");

        try {
            Dmember dmember = dmemberService.queryByWxCode(wxCode);
            Dorder dorder = new Dorder();
            dorder.setOrderState(Integer.valueOf(status));
            dorder.setPageInfo(pageObject);
            List orderList = dorderService.queryByUser(dorder); // 用户订单列表
            responseContent = ResponseHandler.makeResponse(orderList, true);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return JSONObject.toJSONString(responseContent);

    }
 
    @ResponseBody
    @RequestMapping(value = "/orderlist.htm" )
    public String memberOrderList(HttpServletRequest request) {

        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        Integer pageNo = (Integer) params.get("pageNo");

        String wxCode = (String) params.get("wxCode");


        String status = "";
        PageObject pageObject = new PageObject();
        pageObject.setPageNo(1);
        if( null != params )
            status = (String) params.get("status");

        try {
            Dmember dmember = dmemberService.queryByWxCode(wxCode);
            Dorder  dorder =  new Dorder();
            dorder.setOrderState(Integer.valueOf(status));
            dorder.setPageInfo(pageObject);
            List orderList  = dorderService.queryByUser(dorder); //用户订单列表
            responseContent = ResponseHandler.makeResponse(orderList, true);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return JSONObject.toJSONString(responseContent);
    }



    @ResponseBody
    @RequestMapping(value = "/collectlist.htm" )
    public String memberCollectList(HttpServletRequest request) {


        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        String pageNo = (String) params.get("pageNo");
        String  wxCode = (String) params.get("wxCode");
        String  type = (String) params.get("type");

        PageObject pageObject = new PageObject();
        pageObject.setPageNo(Integer.valueOf(pageNo));


        try {
            Dmember dmember = dmemberService.queryByWxCode(wxCode);
            Dcollect dcollect = new Dcollect();




            dcollect.setMemberId(dmember.getMemberId());
            dcollect.setType(type);
            dcollect.setPageInfo(pageObject);

            Map result = new HashMap();
            dcollect.setPageInfo(pageObject);
            List collectList =  null;
            Map countMap = dcollectService.queryCountByUserId(dmember.getMemberId());
                if( null != type && type.equals("1") )
                collectList  = dcollectService.queryGoodCollByUserAndType(dcollect); //用户收藏
                else
                collectList  = dcollectService.queryStoreCollByUserAndType(dcollect); //用户收藏



            result.put("collectList",collectList);
            result.put("countMap",countMap);

            responseContent = ResponseHandler.makeResponse(result, true);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return JSONObject.toJSONString(responseContent);
    }


    @ResponseBody
    @RequestMapping(value = "/consumptionlist.htm" )
    public String memberConsumptionList(HttpServletRequest request) {


        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        Integer pageNo = (Integer) params.get("pageNo");
        String wxCode = (String) params.get("wxCode");

        PageObject pageObject = new PageObject();
        pageObject.setPageNo(1);


        try {
            Dmember dmember = dmemberService.queryByWxCode(wxCode);
            dmember.setPageInfo(pageObject);
            List consumptionList  = dconsumptionService.queryByUser(dmember); //用户消费卷
            responseContent = ResponseHandler.makeResponse(consumptionList, true);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return JSONObject.toJSONString(responseContent);
    }


    @ResponseBody
    @RequestMapping(value = "/redpacklist.htm" )
    public String memberRedPackList(HttpServletRequest request) {


        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        Integer pageNo = (Integer) params.get("pageNo");
        String wxCode = (String) params.get("wxCode");

        PageObject pageObject = new PageObject();
        pageObject.setPageNo(1);


        try {
            Dmember dmember = dmemberService.queryByWxCode(wxCode);
            dmember.setPageInfo(pageObject);
            List redpackList  = dredpacketsDistributeService.queryByUser(dmember); //用户红包
            responseContent = ResponseHandler.makeResponse(redpackList, true);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return JSONObject.toJSONString(responseContent);
    }

    @ResponseBody
    @RequestMapping ( value = "register.htm")
    public String register( HttpServletRequest request )
    {

        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();


        Dmember  dmember = JSONObject.parseObject(JsonUtil.map2json(params), Dmember.class);
//        String wxCode = (String) params.get("wxCode");




        try {
            boolean flag  = dmemberService.register(dmember);
            if( flag )
                responseContent = ResponseHandler.makeResponse(dmember, true);
            else
                responseContent = ResponseHandler.makeResponse(null, true);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return JSONObject.toJSONString(responseContent);

    }

    @ResponseBody
    @RequestMapping(value = "/userInfo")
    public String userInfo ( HttpServletRequest request )
    {



        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        Map result = new HashMap();
        String wxCode = (String) params.get("wxCode");
        try {

            List    vipList   =  dvipService.queryAll();
            Dmember  dmember  = dmemberService.queryByWxCode(wxCode);
            result.put("vipList",vipList);
            result.put("memberInfo",dmember);
            responseContent = ResponseHandler.makeResponse(result, true);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return JSONObject.toJSONString(responseContent);
    }

    @ResponseBody
    @RequestMapping(value = "/applyRoYao")
    public String applyRoYaoMan(HttpServletRequest request)
    {

        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        String wxCode = (String) params.get("wxCode");

        Dtopman  topMan = JSON.parseObject(JsonUtil.map2json(params), Dtopman.class);

        try {

            Dmember dmember = dmemberService.queryByWxCode(wxCode);
            topMan.setMemberId(Long.valueOf(dmember.getMemberId()));

            int result = dtopmanService.save(topMan);

            responseContent = ResponseHandler.makeResponse(topMan, true);


        } catch (Exception e) {
            e.printStackTrace();
        }
        return JSONObject.toJSONString(responseContent);
    }

    // 余额明细查询
    @ResponseBody
    @RequestMapping(value = "/lanceList.htm")
    public String queryUserbalanceList(HttpServletRequest request) {
        ResponseContent responseContent = new ResponseContent();
        RequestContent requestContent = RequestHandler.execute(request);
        Map<?, ?> params = requestContent.getBody();
        Integer pageNo = (Integer) params.get("pageNo");

        PageObject pageObject = new PageObject();
        pageObject.setPageNo(1);
        try {
            DbalanceLogs logs = JSON.parseObject(JsonUtil.map2json(params), DbalanceLogs.class);
            pageObject.setPageSize(10);
            logs.setPageInfo(pageObject);
            List balanceList = dbalancelogsService.queryUserBalancelogs(logs);
            responseContent = ResponseHandler.makeResponse(balanceList, true);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return JSONObject.toJSONString(responseContent);
    }



}
