<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.royao.mapper.DorderMapper">

    <resultMap id="RMDorder" type="com.royao.model.Dorder">
        <result property="orderId" column="order_id"/>
        <result property="orderSn" column="order_sn"/>
        <result property="paySn" column="pay_sn"/>
        <result property="storeId" column="store_id"/>
        <result property="storeName" column="store_name"/>
        <result property="buyerId" column="buyer_id"/>
        <result property="buyerName" column="buyer_name"/>
        <result property="addTime" column="add_time"/>
        <result property="paymentCode" column="payment_code"/>
        <result property="paymentTime" column="payment_time"/>
        <result property="finnshedTime" column="finnshed_time"/>
        <result property="orderAmount" column="order_amount"/>
        <result property="rcbAmount" column="rcb_amount"/>
        <result property="pdAmount" column="pd_amount"/>
        <result property="evaluationState" column="evaluation_state"/>
        <result property="orderState" column="order_state"/>
        <result property="refundState" column="refund_state"/>
        <result property="lockState" column="lock_state"/>
        <result property="deleteState" column="delete_state"/>
        <result property="refundAmount" column="refund_amount"/>
        <result property="delayTime" column="delay_time"/>
        <result property="orderFrom" column="order_from"/>
        <result property="orderType" column="order_type"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="columns">
        <![CDATA[

		order_id,order_sn,pay_sn,store_id,store_name,buyer_id,buyer_name,add_time,payment_code,payment_time,finnshed_time,order_amount,rcb_amount,pd_amount,evaluation_state,order_state,refund_state,lock_state,delete_state,refund_amount,delay_time,order_from,order_type

        ]]>
    </sql>

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="save" useGeneratedKeys="true" keyProperty="orderId">
        <![CDATA[
        INSERT INTO d_order (
        	order_id ,
        	order_sn ,
        	pay_sn ,
        	store_id ,
        	store_name ,
        	buyer_id ,
        	buyer_name ,
        	add_time ,
        	payment_code ,
        	payment_time ,
        	finnshed_time ,
        	order_amount ,
        	rcb_amount ,
        	pd_amount ,
        	evaluation_state ,
        	order_state ,
        	refund_state ,
        	lock_state ,
        	delete_state ,
        	refund_amount ,
        	delay_time ,
        	order_from ,
        	order_type 
        ) VALUES (
        	#{orderId} ,
        	#{orderSn} ,
        	#{paySn} ,
        	#{storeId} ,
        	#{storeName} ,
        	#{buyerId} ,
        	#{buyerName} ,
        	#{addTime} ,
        	#{paymentCode} ,
        	#{paymentTime} ,
        	#{finnshedTime} ,
        	#{orderAmount} ,
        	#{rcbAmount} ,
        	#{pdAmount} ,
        	#{evaluationState} ,
        	#{orderState} ,
        	#{refundState} ,
        	#{lockState} ,
        	#{deleteState} ,
        	#{refundAmount} ,
        	#{delayTime} ,
        	#{orderFrom} ,
        	#{orderType} 
        )
    ]]>
        <!--
            oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL
            DB2: order="BEFORE"" values nextval for sequenceName
        <selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
            SELECT sequenceName.nextval AS ID FROM DUAL
        </selectKey>
        -->
    </insert>

    <update id="update">
        <![CDATA[

        UPDATE d_order SET
	        order_sn = #{orderSn} ,
	        pay_sn = #{paySn} ,
	        store_id = #{storeId} ,
	        store_name = #{storeName} ,
	        buyer_id = #{buyerId} ,
	        buyer_name = #{buyerName} ,
	        add_time = #{addTime} ,
	        payment_code = #{paymentCode} ,
	        payment_time = #{paymentTime} ,
	        finnshed_time = #{finnshedTime} ,
	        order_amount = #{orderAmount} ,
	        rcb_amount = #{rcbAmount} ,
	        pd_amount = #{pdAmount} ,
	        evaluation_state = #{evaluationState} ,
	        order_state = #{orderState} ,
	        refund_state = #{refundState} ,
	        lock_state = #{lockState} ,
	        delete_state = #{deleteState} ,
	        refund_amount = #{refundAmount} ,
	        delay_time = #{delayTime} ,
	        order_from = #{orderFrom} ,
	        order_type = #{orderType} 
        WHERE 
	        order_id = #{orderId} 

        ]]>
    </update>

    <delete id="delete">
        <![CDATA[

        DELETE FROM d_order WHERE
        order_id = #{id} 

        ]]>
    </delete>

    <select id="queryById" resultMap="RMDorder">
        SELECT
        <include refid="columns"/>
        <![CDATA[
		    FROM d_order 
	        WHERE 
		        order_id = #{id} 
	    ]]>
    </select>


    <select id="listWithPageCount" resultType="long">
        SELECT count(*) FROM d_order where 1=1

    </select>


    <select id="queryByUser" resultMap="RMDorder">
        SELECT
        <include refid="columns"/>
        FROM d_order
        where 1=1 and buyer_id = #{buyerId}
        <if test="orderState!=null">
            and order_state = #{orderState}
        </if>
        limit #{pageInfo.begin} , #{pageInfo.end}
    </select>

    <select id="queryOrderCountByUserId" resultType="java.lang.Integer">
        SELECT
        count(a.buyer_id)
        FROM d_order a
        where buyer_id = #{value}
    </select>


    <select id="queryDifferentStatusOrderCountByUserId" resultType="java.util.HashMap">
    select count(aa.buyer_id) as total ,if(ISNULL(a.cancel),0,a.cancel) as cancel, if(ISNULL(b.unpay),0,b.unpay) as unpay ,if(ISNULL(c.payed),0,c.payed) as payed ,if(ISNULL(d.sended),0,d.sended) as sended,if(ISNULL(e.recived),0,e.recived) as recived from (select buyer_id from  d_order ) aa left outer join  ( select buyer_id ,count(buyer_id) as cancel from d_order where order_state = 0  ) a  on aa.buyer_id = a.buyer_id
    left outer join ( select buyer_id ,count(buyer_id) as unpay from d_order where order_state = 10 ) b  on   aa.buyer_id = b.buyer_id left outer join ( select buyer_id ,count(buyer_id) as payed from d_order where order_state = 20 ) c on  aa.buyer_id = c.buyer_id
    left outer join ( select buyer_id ,count(buyer_id) as sended from d_order where order_state = 30 ) d on  aa.buyer_id = d.buyer_id left outer join ( select buyer_id ,count(buyer_id) as recived from d_order where order_state = 40 ) e on  aa.buyer_id = e.buyer_id
    where  aa.buyer_id = #{value}
    </select>


    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="listWithPage" resultType="java.util.HashMap">
        SELECT
        <include refid="columns"/>
        FROM d_order
        where 1=1
        limit #begin# , #end#
    </select>


    <select id="queryAll" resultMap="RMDorder">
        SELECT
        <include refid="columns"/>
        FROM d_order
    </select>

    <select id="queryByCondition" resultMap="RMDorder">
        SELECT
        <include refid="columns"/>
        FROM d_order

        <where>
            <if test="@Ognl@isNotEmpty(orderId)">
                AND order_id = #{orderId}
            </if>
            <if test="@Ognl@isNotEmpty(orderSn)">
                AND order_sn = #{orderSn}
            </if>
            <if test="@Ognl@isNotEmpty(paySn)">
                AND pay_sn = #{paySn}
            </if>
            <if test="@Ognl@isNotEmpty(storeId)">
                AND store_id = #{storeId}
            </if>
            <if test="@Ognl@isNotEmpty(storeName)">
                AND store_name = #{storeName}
            </if>
            <if test="@Ognl@isNotEmpty(buyerId)">
                AND buyer_id = #{buyerId}
            </if>
            <if test="@Ognl@isNotEmpty(buyerName)">
                AND buyer_name = #{buyerName}
            </if>
            <if test="@Ognl@isNotEmpty(addTime)">
                AND add_time = #{addTime}
            </if>
            <if test="@Ognl@isNotEmpty(paymentCode)">
                AND payment_code = #{paymentCode}
            </if>
            <if test="@Ognl@isNotEmpty(paymentTime)">
                AND payment_time = #{paymentTime}
            </if>
            <if test="@Ognl@isNotEmpty(finnshedTime)">
                AND finnshed_time = #{finnshedTime}
            </if>
            <if test="@Ognl@isNotEmpty(orderAmount)">
                AND order_amount = #{orderAmount}
            </if>
            <if test="@Ognl@isNotEmpty(rcbAmount)">
                AND rcb_amount = #{rcbAmount}
            </if>
            <if test="@Ognl@isNotEmpty(pdAmount)">
                AND pd_amount = #{pdAmount}
            </if>
            <if test="@Ognl@isNotEmpty(evaluationState)">
                AND evaluation_state = #{evaluationState}
            </if>
            <if test="@Ognl@isNotEmpty(orderState)">
                AND order_state = #{orderState}
            </if>
            <if test="@Ognl@isNotEmpty(refundState)">
                AND refund_state = #{refundState}
            </if>
            <if test="@Ognl@isNotEmpty(lockState)">
                AND lock_state = #{lockState}
            </if>
            <if test="@Ognl@isNotEmpty(deleteState)">
                AND delete_state = #{deleteState}
            </if>
            <if test="@Ognl@isNotEmpty(refundAmount)">
                AND refund_amount = #{refundAmount}
            </if>
            <if test="@Ognl@isNotEmpty(delayTime)">
                AND delay_time = #{delayTime}
            </if>
            <if test="@Ognl@isNotEmpty(orderFrom)">
                AND order_from = #{orderFrom}
            </if>
            <if test="@Ognl@isNotEmpty(orderType)">
                AND order_type = #{orderType}
            </if>
        </where>
    </select>


</mapper>

