/*
 * Powered By [rapid-framework]
 * Web Site: http://www.rapid-framework.org.cn
 * Google Code: http://code.google.com/p/rapid-framework/
 * Since 2008 - 2015
 */


package com.royao.services.impl;


import com.royao.ctrl.Index;
import com.royao.mapper.DredpacketsMapper;
import com.royao.model.Devent;
import com.royao.model.Dmember;
import com.royao.model.Dredpackets;
import com.royao.services.base.impl.BaseServiceImpl;
import com.royao.services.inface.DredpacketsService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Random;


@Service("redpacketsService")
public class DredpacketsServiceImpl extends BaseServiceImpl<Dredpackets> implements DredpacketsService {

    @Autowired
    private DredpacketsMapper dredpacketsMapper;


    public int save(Dredpackets dredpackets) throws Exception {
        return dredpacketsMapper.save(dredpackets);
    }

    public int update(Dredpackets dredpackets) throws Exception {
        return dredpacketsMapper.update(dredpackets);
    }

    public int delete(Long id) throws Exception {
        return dredpacketsMapper.delete(id);
    }

    public Dredpackets queryById(Long id) throws Exception {
        return dredpacketsMapper.queryById(id);
    }

    public List<Dredpackets> queryByCondtion(Map map) throws Exception {
        return dredpacketsMapper.queryByCondtion(map);
    }

    public List<Dredpackets> queryAll() throws Exception {
        return dredpacketsMapper.queryAll();
    }

    public List<Dredpackets> listWithPage(Dredpackets t) throws Exception {
        // TODO Auto-generated method stub
        return null;
    }


    public Dredpackets queryByType(int type) throws Exception {
        String _type = null;
        switch (type)
        {
            case 1:
                _type  = "hd";
                break;
            case 2:
                _type = "zc";
                break;
            case 3 :
                _type = "fx";
                break;
            default:
                _type = "hd";
                break;


        }

        return  dredpacketsMapper.queryByType(_type);
    }

    public long getRandomAmount( Dredpackets dredpackets )
    {
        long result = 0l;
        HongBaoAlgorithm hongBaoAlgorithm = new HongBaoAlgorithm();

        result =  hongBaoAlgorithm.generate(dredpackets.getAmount(),dredpackets.getQuantity(),dredpackets.getMinAmount(),dredpackets.getMaxAmount());

        return result;

    }


    class HongBaoAlgorithm{

        Random random = new Random();

        /**
         * 生产min和max之间的随机数，但是概率不是平均的，从min到max方向概率逐渐加大。
         * 先平方，然后产生一个平方值范围内的随机数，再开方，这样就产生了一种“膨胀”再“收缩”的效果。
         *
         * @param min
         * @param max
         * @return
         */
         long xRandom(long min, long max) {
            return sqrt(nextLong(sqr(max - min)));
        }

        /**
         *
         * @param total
         *            红包总额
         * @param count
         *            红包个数
         * @param max
         *            每个小红包的最大额
         * @param min
         *            每个小红包的最小额
         * @return 存放生成的每个小红包的值的数组
         */
        public  long  generate(long total, int count, long max, long min) {
            long[] result = new long[count];

            long average = total / count;

            long a = average - min;
            long b = max - min;

            //
            //这样的随机数的概率实际改变了，产生大数的可能性要比产生小数的概率要小。
            //这样就实现了大部分红包的值在平均数附近。大红包和小红包比较少。
            long range1 = sqr(average - min);
            long range2 = sqr(max - average);

            for (int i = 0; i < result.length; i++) {
                //因为小红包的数量通常是要比大红包的数量要多的，因为这里的概率要调换过来。
                //当随机数>平均值，则产生小红包
                //当随机数<平均值，则产生大红包
                if (nextLong(min, max) > average) {
                    // 在平均线上减钱
//              long temp = min + sqrt(nextLong(range1));
                    long temp = min + xRandom(min, average);
                    result[i] = temp;
                    total -= temp;
                } else {
                    // 在平均线上加钱
//              long temp = max - sqrt(nextLong(range2));
                    long temp = max - xRandom(average, max);
                    result[i] = temp;
                    total -= temp;
                }
            }
            // 如果还有余钱，则尝试加到小红包里，如果加不进去，则尝试下一个。
            while (total > 0) {
                for (int i = 0; i < result.length; i++) {
                    if (total > 0 && result[i] < max) {
                        result[i]++;
                        total--;
                    }
                }
            }
            // 如果钱是负数了，还得从已生成的小红包中抽取回来
            while (total < 0) {
                for (int i = 0; i < result.length; i++) {
                    if (total < 0 && result[i] > min) {
                        result[i]--;
                        total++;
                    }
                }
            }

            long  rdNumber =  nextLong(count);
            return result[Integer.valueOf(""+rdNumber)];
        }

         long sqrt(long n) {
            // 改进为查表？
            return (long) Math.sqrt(n);
        }

         long sqr(long n) {
            // 查表快，还是直接算快？
            return n * n;
        }

         long nextLong(long n) {
            return random.nextInt((int) n);
        }

         long nextLong(long max, long min) {
            return random.nextInt((int) (max - min + 1)) + min;
        }



    }


	public List<Dredpackets> queryAvailable(Dredpackets dred) {
		return this.dredpacketsMapper.queryAvailable(dred);
	}

	public List<Dredpackets> pListWithPageAndCondition(Dredpackets paramRedpackets) {
		return this.dredpacketsMapper.pListWithPageAndCondition(paramRedpackets);
	}

	public long pCountWithPageAndCondition(Dredpackets paramRedpackets) {
		return this.dredpacketsMapper.pCountWithPageAndCondition(paramRedpackets);
	}
}