package com.royao.ctrl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cc.yiwang.commons.utils.MoneyUtil;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.royao.commons.enums.RedpacketsStatus;
import com.royao.http.RequestContent;
import com.royao.http.RequestHandler;
import com.royao.http.ResponseContent;
import com.royao.http.ResponseHandler;
import com.royao.model.DbalanceLogs;
import com.royao.model.Dmember;
import com.royao.model.Dorder;
import com.royao.model.DredpacketsDistribute;
import com.royao.services.inface.DbalanceLogsService;
import com.royao.services.inface.DmemberService;
import com.royao.services.inface.DorderService;
import com.royao.services.inface.DredpacketsDistributeService;
import com.royao.util.JsonUtil;
import com.royao.util.Validate;

/**
 * 
 * @ClassName: OrderCtrl
 * @Description: TODO(处理订单请求)
 * @author 庞亮
 * @date 2016年1月8日
 *
 */
@Controller
@RequestMapping("/order")
public class OrderCtrl {

	@Autowired
	private DorderService dorderService;

	@Autowired
	private DmemberService dmemberService;
	
	@Autowired
	private DredpacketsDistributeService redpacketsDistributeService;
	
	@Autowired
	private  DbalanceLogsService dbalancelogsService;
	
	

	Logger logger = Logger.getLogger(this.getClass());

	/**
	 * 
	 * @Title: createdOrder
	 * @Description: TODO(创建订单)
	 * @param @param request
	 * @param @param response
	 * @param @return 参数
	 * @return String 返回类型
	 * @throws
	 */
	@ResponseBody
	@RequestMapping("/createdOrder.htm")
	public String createdOrder(HttpServletRequest request, HttpServletResponse response) {

		logger.info("创建订单数据实现类");
		
		ResponseContent responseContent = new ResponseContent();
		RequestContent requestContent = RequestHandler.execute(request);

		Map<?,?> params = requestContent.getBody();

		Map<String, Object> m = new HashMap<String, Object>();
		Dorder dorder = JSON.parseObject(JsonUtil.map2json(params), Dorder.class);
		dorder.setAddTime(new Date());
		dorder.setOrderState(1); // 订单状态-未支付
		dorder.setOrderFrom(2); // 订单来源-mobile
		dorder.setDeleteState(0); // 订单状态 - 正常
		
		Long rcbId=null;
		DredpacketsDistribute dredpacketsDistribute=null;
		//获得红包id		
		if(StringUtils.isNotBlank(params.get("rcbId")+"")){//红包id
			if(!"".equals(params.get("rcbId")+"")){//不等于空串
				logger.info("查询红包ID："+params.get("rcbId"));
				rcbId=Long.parseLong(params.get("rcbId")+"");
				try {
					
					dredpacketsDistribute=redpacketsDistributeService.queryById(rcbId);
				} catch (Exception e) {
					logger.error("查询红包异常："+e.getMessage());
					e.printStackTrace();
				}
			}
			
		}
		
		
		/**diytest 值**/
		dorder.setmTrueName(params.get("mTrueName")+"");
		dorder.setmDate(params.get("mDate")+"");
		dorder.setmMobile(params.get("mMobile")+"");
		dorder.setmAddress(params.get("mAddress")+"");

		// 查询余额,看是否满足付款提交
		try {
			if (null != dorder.getMemberId()) {
				Dmember dmember = this.dmemberService.queryById(dorder.getMemberId());
				if (null != dmember) {
					m.put("price", dmember.getAvailablePredepositDollor());
				} else {
					m.put("status", "false");
					m.put("message", "登陆超时,请刷新后重新登陆!");

					this.logger.info("会员信息为null");
					responseContent = ResponseHandler.makeResponse(m, true);
					return JSONObject.toJSONString(responseContent);

				}
			} else {
				m.put("status", "false");
				m.put("message", "登陆超时,请刷新后重新登陆!");

				this.logger.info("会员信息为null");
				responseContent = ResponseHandler.makeResponse(m, true);
				return JSONObject.toJSONString(responseContent);
			}
		} catch (Exception e2) {
			e2.printStackTrace();
		}

		// 根据订单数量产生订单条数!

		Long total_order_num = Long.parseLong(this.getOrderNum());
		dorder.setPaySn(total_order_num); // 总订单号
		

		Long good_size = dorder.getGoodsNum(); // 产品数量作为循环参数
		try {
			for (int i = 0; i < good_size; i++) {
				if (i == 0) {
					// 这里做插入红包操作..
					if(dredpacketsDistribute!=null){
						logger.info("进行红包锁定操作:[]"+dredpacketsDistribute.getId());
						
						dorder.setRcbId(dredpacketsDistribute.getId());//红包id
						dorder.setRcbAmount(dredpacketsDistribute.getMoney());//红包面额
						
						Long pdAmount=dorder.getOrderAmount();//vip商品价格
						pdAmount=dorder.getOrderAmount()-dredpacketsDistribute.getMoney();
						if(pdAmount<=0){
							pdAmount=1L;//如果总支付金额小于等于0 预存款金额为1分
						}
						dorder.setPdAmount(pdAmount);
						
						/**修改红包状态**/
						dredpacketsDistribute.setStatus(RedpacketsStatus.lockup);//已经锁定
						redpacketsDistributeService.update(dredpacketsDistribute);//进行红包锁定操作
					}
			
				}
				dorder.setOrderId(null);//主键自增长
				dorder.setOrderSn(Long.parseLong(this.getOrderNum())); // 随机订单号
				dorder.setGoodsNum(1L);
				//非第一条订单
				if(i != 0){
					dorder.setPdAmount(dorder.getOrderAmount());//支付预存款金额=产品订单金额
				}
				
				this.dorderService.save(dorder);
				//清空 红包数据
				dorder.setRcbId(null);//红包id 清空
				dorder.setRcbAmount(null);//红包面额 清空
			}
			m.put("status", "true");
			m.put("total_order_num", total_order_num); // 返回给前台一个总订单号,以便支付;
			responseContent = ResponseHandler.makeResponse(m, true);
		} catch (Exception e) {
			e.printStackTrace();
			m.put("status", "false");
			m.put("message", "系统错误,请稍后重试!");
			try {
				responseContent = ResponseHandler.makeResponse(m, true);
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			this.logger.info("保存订单出错!");
		}

		return JSONObject.toJSONString(responseContent);

	}

	/**
	 * 数据接口
	 * @Title: getOrderNum 
	 * @Description: TODO(支付订单)
	 * @param @return 参数
	 * @return String 返回类型
	 * @throws
	 */

	@ResponseBody
	@RequestMapping("/pay.htm")
	public String pay(HttpServletRequest request, HttpServletResponse response) {
		ResponseContent responseContent = new ResponseContent();
		RequestContent requestContent = RequestHandler.execute(request);

		String totalNumber = "";
		String needpay = "";
		String memberId = "";
		Map<?, ?> params = requestContent.getBody();
		Map<String, Object> map = new HashMap<String, Object>();
		if (null != params) {
			totalNumber = (String) params.get("totalNumber");//支付单号（关联多条订单信息）
			needpay = (String) params.get("needpay");//支付金额
			memberId = (String) params.get("memberId");//会员id
			Dmember dmember = null;
			try {
				/**获取会员信息**/
				dmember = this.dmemberService.queryById(Long.parseLong(memberId));
			} catch (Exception e1) {
				e1.printStackTrace();
				this.logger.info("查询会员信息出错..");
			}
			if (!Validate.isEmpty(totalNumber) && dmember != null) {
				try {
					map.put("paySn", totalNumber);//支付订单单号（关联多条订单信息）
					map.put("memberId", memberId);//会员id号
					List<Dorder> list = this.dorderService.queryByCondtion(map);
					Long pdAmount=0L;
					//汇总订单总支付金额
					for(int i = 0;i<list.size();i++){
						pdAmount=pdAmount+list.get(i).getPdAmount();
					}
				
					if (null != list) {
						/**判断账户金额是否大于或者大于需要扣款的金额**/
						if (dmember.getAvailablePredeposit() >= pdAmount) {
							/**完成扣款计算**/
							dmember.setAvailablePredeposit(dmember.getAvailablePredeposit()
									- pdAmount); // 修改余额
							/**修改会员账户**/
							this.dmemberService.update(dmember);
							/**根据主订单号  修改订单状态 /2未消费 **/ 
							this.dorderService.setOrderStatus(2, Long.parseLong(totalNumber));
							/**插入账户流水金额**/
							DbalanceLogs dblog=new DbalanceLogs();
							dblog.setAmount(pdAmount);
							dblog.setBalance(pdAmount);
							dblog.setState(2);//支付成功
							dblog.setCurrentBalance(dmember.getAvailablePredeposit()
									- pdAmount);//所剩余额
							
							dbalancelogsService.save(dblog);
							
							
							map.put("status", "true");
						} else {
							map.isEmpty();
							map.put("status", "false");
							map.put("message", "余额不足,请先充值后付款!");
						}

					}
					responseContent = ResponseHandler.makeResponse(map, true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return JSONObject.toJSONString(responseContent);

	}

	public String getOrderNum() {
		int r1 = (int) (Math.random() * (10));// 产生2个0-9的随机数
		int r2 = (int) (Math.random() * (10));
		long now = System.currentTimeMillis();// 一个13位的时间戳
		String paymentID = String.valueOf(r1) + String.valueOf(r2) + String.valueOf(now);// 订单ID
		return paymentID;

	}
}
